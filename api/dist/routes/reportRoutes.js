"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_1 = require("../middleware/auth");
const validation_1 = require("../middleware/validation");
const reportController_1 = require("../controllers/reportController");
const reportValidation_1 = require("../validation/reportValidation");
const router = (0, express_1.Router)();
router.get('/pco/reports', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.reportListQuerySchema, 'query'), reportController_1.getPCOReports);
router.get('/pco/reports/pre-fill/:clientId', auth_1.authenticateToken, reportController_1.getPreFillData);
router.get('/pco/reports/:id', auth_1.authenticateToken, reportController_1.getReportById);
router.post('/pco/reports', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.createReportSchema), reportController_1.createReport);
router.post('/pco/reports/complete', auth_1.authenticateToken, reportController_1.createCompleteReport);
router.put('/pco/reports/:id', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.updateReportSchema), reportController_1.updateReport);
router.put('/pco/reports/:id/complete', auth_1.authenticateToken, reportController_1.updateCompleteReport);
router.delete('/pco/reports/:id', auth_1.authenticateToken, reportController_1.deleteReport);
router.post('/pco/reports/:id/mark-new-equipment', auth_1.authenticateToken, reportController_1.markNewEquipmentBeforeUpdate);
router.post('/pco/reports/:id/submit', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.submitReportSchema), reportController_1.submitReport);
router.post('/pco/reports/:id/bait-stations', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.addBaitStationSchema), reportController_1.addBaitStation);
router.put('/pco/reports/:id/bait-stations/:stationId', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.updateBaitStationSchema), reportController_1.updateBaitStation);
router.delete('/pco/reports/:id/bait-stations/:stationId', auth_1.authenticateToken, reportController_1.deleteBaitStation);
router.put('/pco/reports/:id/fumigation', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.updateFumigationSchema), reportController_1.updateFumigation);
router.post('/pco/reports/:id/insect-monitors', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.addInsectMonitorSchema), reportController_1.addInsectMonitor);
router.put('/pco/reports/:id/insect-monitors/:monitorId', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.updateInsectMonitorSchema), reportController_1.updateInsectMonitor);
router.delete('/pco/reports/:id/insect-monitors/:monitorId', auth_1.authenticateToken, reportController_1.deleteInsectMonitor);
router.get('/admin/reports', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.reportListQuerySchema, 'query'), reportController_1.getAdminReports);
router.get('/admin/reports/pending', auth_1.authenticateToken, reportController_1.getPendingReports);
router.get('/admin/reports/:id', auth_1.authenticateToken, reportController_1.getReportById);
router.put('/admin/reports/:id', auth_1.authenticateToken, reportController_1.adminUpdateReport);
router.post('/admin/reports/:id/approve', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.approveReportSchema), reportController_1.approveReport);
router.post('/admin/reports/:id/decline', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.declineReportSchema), reportController_1.declineReport);
router.post('/admin/reports/:id/decline/force', auth_1.authenticateToken, (0, validation_1.validateRequest)(reportValidation_1.declineReportSchema), reportController_1.forceDeclineReport);
router.post('/admin/reports/:id/archive', auth_1.authenticateToken, reportController_1.archiveReport);
router.get('/admin/reports/:id/download', auth_1.authenticateToken, reportController_1.adminDownloadReportPDF);
router.post('/admin/reports/:id/email', auth_1.authenticateToken, reportController_1.adminEmailReportPDF);
router.get('/pco/reports/:id/export-json', auth_1.authenticateToken, reportController_1.exportReportAsJSON);
router.post('/admin/reports/import-json', auth_1.authenticateToken, reportController_1.importReportFromJSON);
exports.default = router;
//# sourceMappingURL=reportRoutes.js.map